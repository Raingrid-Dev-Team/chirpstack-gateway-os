--- /dev/null
+++ b/feeds/chirpstack/semtech/libloragw-sx1302/patches/spi-half-duplex.patch
@@ -0,0 +1,161 @@
+--- a/libloragw/src/loragw_spi.c
++++ b/libloragw/src/loragw_spi.c
+@@ -205,7 +205,7 @@ int lgw_spi_r(void *com_target, uint8_t
+     uint8_t out_buf[5];
+     uint8_t command_size;
+     uint8_t in_buf[ARRAY_SIZE(out_buf)];
+-    struct spi_ioc_transfer k;
++    struct spi_ioc_transfer k[2];
+     int a;
+ 
+     /* check input variables */
+@@ -218,25 +218,27 @@ int lgw_spi_r(void *com_target, uint8_t
+     out_buf[0] = spi_mux_target;
+     out_buf[1] = READ_ACCESS | ((address >> 8) & 0x7F);
+     out_buf[2] =               ((address >> 0) & 0xFF);
+-    out_buf[3] = 0x00;
+-    out_buf[4] = 0x00;
+-    command_size = 5;
++    //out_buf[3] = 0x00;
++    //out_buf[4] = 0x00;
++    command_size = 3;
+ 
+     /* I/O transaction */
+     memset(&k, 0, sizeof(k)); /* clear k */
+-    k.tx_buf = (unsigned long) out_buf;
+-    k.rx_buf = (unsigned long) in_buf;
+-    k.len = command_size;
+-    k.cs_change = 0;
+-    a = ioctl(spi_device, SPI_IOC_MESSAGE(1), &k);
++    k[0].tx_buf = (unsigned long) out_buf;
++    k[1].rx_buf = (unsigned long) in_buf;
++    k[0].len = command_size;
++    k[1].len = 2;
++    k[0].cs_change = 0;
++    k[1].cs_change = 1;
++    a = ioctl(spi_device, SPI_IOC_MESSAGE(2), &k);
+ 
+     /* determine return code */
+-    if (a != (int)k.len) {
++    if (a != (int)k[1].len + (int)k[0].len) {
+         DEBUG_MSG("ERROR: SPI READ FAILURE\n");
+         return LGW_SPI_ERROR;
+     } else {
+-        DEBUG_MSG("Note: SPI read success\n");
+-        *data = in_buf[command_size - 1];
++        DEBUG_PRINTF("Note: SPI read success: %02X %02X %02X %02X\n", in_buf[0], in_buf[1], in_buf[2], in_buf[3]);
++        *data = in_buf[1];
+         return LGW_SPI_SUCCESS;
+     }
+ }
+@@ -296,7 +298,7 @@ int lgw_spi_wb(void *com_target, uint8_t
+     k[0].tx_buf = (unsigned long) &command[0];
+     k[0].len = command_size;
+     k[0].cs_change = 0;
+-    k[1].cs_change = 0;
++    k[1].cs_change = 1;
+     for (i=0; size_to_do > 0; ++i) {
+         chunk_size = (size_to_do < LGW_BURST_CHUNK) ? size_to_do : LGW_BURST_CHUNK;
+         offset = i * LGW_BURST_CHUNK;
+@@ -322,8 +324,9 @@ int lgw_spi_wb(void *com_target, uint8_t
+ /* Burst (multiple-byte) read */
+ int lgw_spi_rb(void *com_target, uint8_t spi_mux_target, uint16_t address, uint8_t *data, uint16_t size) {
+     int spi_device;
+-    uint8_t command[4];
++    uint8_t command[3];
+     uint8_t command_size;
++	uint8_t chunk_buf[LGW_BURST_CHUNK + 1];
+     struct spi_ioc_transfer k[2];
+     int size_to_do, chunk_size, offset;
+     int byte_transfered = 0;
+@@ -343,8 +346,8 @@ int lgw_spi_rb(void *com_target, uint8_t
+     command[0] = spi_mux_target;
+     command[1] = READ_ACCESS | ((address >> 8) & 0x7F);
+     command[2] =               ((address >> 0) & 0xFF);
+-    command[3] = 0x00;
+-    command_size = 4;
++//    command[3] = 0x00;
++    command_size = 3;
+     size_to_do = size;
+ 
+     /* I/O transaction */
+@@ -352,15 +355,16 @@ int lgw_spi_rb(void *com_target, uint8_t
+     k[0].tx_buf = (unsigned long) &command[0];
+     k[0].len = command_size;
+     k[0].cs_change = 0;
+-    k[1].cs_change = 0;
++    k[1].cs_change = 1;
+     for (i=0; size_to_do > 0; ++i) {
+         chunk_size = (size_to_do < LGW_BURST_CHUNK) ? size_to_do : LGW_BURST_CHUNK;
+         offset = i * LGW_BURST_CHUNK;
+-        k[1].rx_buf = (unsigned long)(data + offset);
+-        k[1].len = chunk_size;
+-        byte_transfered += (ioctl(spi_device, SPI_IOC_MESSAGE(2), &k) - k[0].len );
++        k[1].rx_buf = (unsigned long)&chunk_buf[0];
++        k[1].len = chunk_size + 1;
++        byte_transfered += (ioctl(spi_device, SPI_IOC_MESSAGE(2), &k) - k[0].len - 1 );
+         DEBUG_PRINTF("BURST READ: to trans %d # chunk %d # transferred %d \n", size_to_do, chunk_size, byte_transfered);
+         size_to_do -= chunk_size;  /* subtract the quantity of data already transferred */
++		memcpy(data + offset, chunk_buf + 1, chunk_size);
+     }
+ 
+     /* determine return code */
+--- a/libloragw/src/sx1250_spi.c
++++ b/libloragw/src/sx1250_spi.c
+@@ -103,7 +103,7 @@ int sx1250_spi_r(void *com_target, uint8
+     uint8_t out_buf[cmd_size + size];
+     uint8_t command_size;
+     uint8_t in_buf[ARRAY_SIZE(out_buf)];
+-    struct spi_ioc_transfer k;
++    struct spi_ioc_transfer k[2];
+     int a, i;
+ 
+     /* wait BUSY */
+@@ -118,11 +118,13 @@ int sx1250_spi_r(void *com_target, uint8
+     /* prepare frame to be sent */
+     out_buf[0] = spi_mux_target;
+     out_buf[1] = (uint8_t)op_code;
+-    for(i = 0; i < (int)size; i++) {
++
++    for(i = 0; i < (int)size && data[i]; i++) {
+         out_buf[cmd_size + i] = data[i];
+     }
+-    command_size = cmd_size + size;
++    command_size = cmd_size + i;
+ 
++#if 0
+     /* I/O transaction */
+     memset(&k, 0, sizeof(k)); /* clear k */
+     k.tx_buf = (unsigned long) out_buf;
+@@ -141,6 +143,31 @@ int sx1250_spi_r(void *com_target, uint8
+         memcpy(data, in_buf + cmd_size, size);
+         return LGW_SPI_SUCCESS;
+     }
++#else
++    /* I/O transaction */
++    memset(k, 0, sizeof(k)); /* clear k */
++    k[0].tx_buf = (unsigned long) out_buf;
++    k[1].rx_buf = (unsigned long) in_buf;
++    k[0].len = command_size;
++    k[1].len = size+1;
++    k[0].cs_change = 0;
++    k[1].cs_change = 1;
++    a = ioctl(com_device, SPI_IOC_MESSAGE(2), k);
++
++    /* determine return code */
++    if (a != (int)k[1].len + (int)k[0].len) {
++        DEBUG_MSG("ERROR: SPI READ FAILURE\n");
++        return LGW_SPI_ERROR;
++    } else {
++		for(i =  0; i < size; i++)
++			DEBUG_PRINTF("Note: SPI read success: %d %02X\n", i, in_buf[i]);
++        if (size > 2)
++			memcpy(data+2, in_buf, size);
++		else
++			memcpy(data, in_buf + 1, size);
++        return LGW_SPI_SUCCESS;
++    }
++#endif
+ }
+ 
+ /* --- EOF ------------------------------------------------------------------ */
